{"ast":null,"code":"import React from \"react\";\nimport axios from \"axios\";\nimport environment from '../appSettings/environment';\nconst {\n  useState,\n  useCallback,\n  useMemo,\n  useEffect\n} = React;\nexport const axiosInstance = axios.create({\n  baseURL: environment.api.baseURL,\n  timeout: 1000\n});\nexport const useAxiosLoader = () => {\n  const [counter, setCounter] = useState(0);\n  const inc = useCallback(() => setCounter(counter => counter + 1), [setCounter]); // add to counter\n\n  const dec = useCallback(() => setCounter(counter => counter - 1), [setCounter]); // remove from counter\n\n  const interceptors = useMemo(() => ({\n    request: config => (inc(), config),\n    response: response => (dec(), response),\n    error: error => (dec(), Promise.reject(error))\n  }), [inc, dec]); // create the interceptors\n\n  useEffect(() => {\n    // add request interceptors\n    axiosInstance.interceptors.request.use(interceptors.request, interceptors.error); // add response interceptors\n\n    axiosInstance.interceptors.response.use(interceptors.response, interceptors.error);\n    return () => {\n      // remove all intercepts when done\n      axiosInstance.interceptors.request.eject(interceptors.request);\n      axiosInstance.interceptors.request.eject(interceptors.error);\n      axiosInstance.interceptors.response.eject(interceptors.response);\n      axiosInstance.interceptors.response.eject(interceptors.error);\n    };\n  }, [interceptors]);\n  return [counter > 0];\n};\n/*axiosInstance.interceptors.request.use(function (config) {\r\n    //config.headers = { ...config.headers, auth_token: getAuthToken() };\r\n    // you can also do other modification in config\r\n    return config;\r\n  }, function (error) {\r\n    return Promise.reject(error);\r\n  });*/\n\n/*axiosInstance.interceptors.response.use(function (response) {\r\n    if(response.status === 401) {\r\n        return Promise.reject(response);\r\n    }\r\n -   return response;\r\n  }, function (error) {\r\n    return Promise.reject({errorMessage: \"Service unavailable\"});\r\n  });*/","map":{"version":3,"sources":["C:/Users/Binfac1/Desktop/reactproject/src/axiosInstance.js"],"names":["React","axios","environment","useState","useCallback","useMemo","useEffect","axiosInstance","create","baseURL","api","timeout","useAxiosLoader","counter","setCounter","inc","dec","interceptors","request","config","response","error","Promise","reject","use","eject"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,OAAOC,WAAP,MAAwB,4BAAxB;AACA,MAAM;AAAEC,EAAAA,QAAF;AAAYC,EAAAA,WAAZ;AAAwBC,EAAAA,OAAxB;AAAiCC,EAAAA;AAAjC,IAA+CN,KAArD;AACA,OAAO,MAAMO,aAAa,GAAGN,KAAK,CAACO,MAAN,CAAa;AACxCC,EAAAA,OAAO,EAAEP,WAAW,CAACQ,GAAZ,CAAgBD,OADe;AAExCE,EAAAA,OAAO,EAAE;AAF+B,CAAb,CAAtB;AAKP,OAAO,MAAMC,cAAc,GAAG,MAAM;AAClC,QAAM,CAACC,OAAD,EAAUC,UAAV,IAAwBX,QAAQ,CAAC,CAAD,CAAtC;AAEA,QAAMY,GAAG,GAAGX,WAAW,CAAC,MAAMU,UAAU,CAACD,OAAO,IAAIA,OAAO,GAAG,CAAtB,CAAjB,EAA2C,CAACC,UAAD,CAA3C,CAAvB,CAHkC,CAG+C;;AACjF,QAAME,GAAG,GAAGZ,WAAW,CAAC,MAAMU,UAAU,CAACD,OAAO,IAAIA,OAAO,GAAG,CAAtB,CAAjB,EAA2C,CAACC,UAAD,CAA3C,CAAvB,CAJkC,CAI+C;;AAEjF,QAAMG,YAAY,GAAGZ,OAAO,CAAC,OAAO;AAClCa,IAAAA,OAAO,EAAEC,MAAM,KAAMJ,GAAG,IAAII,MAAb,CADmB;AAElCC,IAAAA,QAAQ,EAAEA,QAAQ,KAAMJ,GAAG,IAAII,QAAb,CAFgB;AAGlCC,IAAAA,KAAK,EAAEA,KAAK,KAAML,GAAG,IAAIM,OAAO,CAACC,MAAR,CAAeF,KAAf,CAAb;AAHsB,GAAP,CAAD,EAIxB,CAACN,GAAD,EAAMC,GAAN,CAJwB,CAA5B,CANkC,CAUjB;;AAEjBV,EAAAA,SAAS,CAAC,MAAM;AACd;AACAC,IAAAA,aAAa,CAACU,YAAd,CAA2BC,OAA3B,CAAmCM,GAAnC,CAAuCP,YAAY,CAACC,OAApD,EAA6DD,YAAY,CAACI,KAA1E,EAFc,CAGd;;AACAd,IAAAA,aAAa,CAACU,YAAd,CAA2BG,QAA3B,CAAoCI,GAApC,CAAwCP,YAAY,CAACG,QAArD,EAA+DH,YAAY,CAACI,KAA5E;AACA,WAAO,MAAM;AACX;AACAd,MAAAA,aAAa,CAACU,YAAd,CAA2BC,OAA3B,CAAmCO,KAAnC,CAAyCR,YAAY,CAACC,OAAtD;AACAX,MAAAA,aAAa,CAACU,YAAd,CAA2BC,OAA3B,CAAmCO,KAAnC,CAAyCR,YAAY,CAACI,KAAtD;AACAd,MAAAA,aAAa,CAACU,YAAd,CAA2BG,QAA3B,CAAoCK,KAApC,CAA0CR,YAAY,CAACG,QAAvD;AACAb,MAAAA,aAAa,CAACU,YAAd,CAA2BG,QAA3B,CAAoCK,KAApC,CAA0CR,YAAY,CAACI,KAAvD;AACD,KAND;AAOD,GAZQ,EAYN,CAACJ,YAAD,CAZM,CAAT;AAcA,SAAO,CAACJ,OAAO,GAAG,CAAX,CAAP;AACD,CA3BM;AA6BP;;;;;;;;AAQA","sourcesContent":["import React from \"react\";\r\nimport axios from \"axios\";\r\nimport environment from '../appSettings/environment'\r\nconst { useState, useCallback,useMemo, useEffect } = React;\r\nexport const axiosInstance = axios.create({\r\n  baseURL: environment.api.baseURL,\r\n  timeout: 1000,\r\n});\r\n\r\nexport const useAxiosLoader = () => {\r\n  const [counter, setCounter] = useState(0);\r\n  \r\n  const inc = useCallback(() => setCounter(counter => counter + 1), [setCounter]); // add to counter\r\n  const dec = useCallback(() => setCounter(counter => counter - 1), [setCounter]); // remove from counter\r\n  \r\n  const interceptors = useMemo(() => ({\r\n    request: config => ((inc(), config)),\r\n    response: response => ((dec(), response)),\r\n    error: error => ((dec(), Promise.reject(error))),\r\n  }), [inc, dec]); // create the interceptors\r\n  \r\n  useEffect(() => {\r\n    // add request interceptors\r\n    axiosInstance.interceptors.request.use(interceptors.request, interceptors.error);\r\n    // add response interceptors\r\n    axiosInstance.interceptors.response.use(interceptors.response, interceptors.error);\r\n    return () => {\r\n      // remove all intercepts when done\r\n      axiosInstance.interceptors.request.eject(interceptors.request);\r\n      axiosInstance.interceptors.request.eject(interceptors.error);\r\n      axiosInstance.interceptors.response.eject(interceptors.response);\r\n      axiosInstance.interceptors.response.eject(interceptors.error);\r\n    };\r\n  }, [interceptors]);\r\n  \r\n  return [counter > 0];\r\n};\r\n\r\n/*axiosInstance.interceptors.request.use(function (config) {\r\n    //config.headers = { ...config.headers, auth_token: getAuthToken() };\r\n    // you can also do other modification in config\r\n    return config;\r\n  }, function (error) {\r\n    return Promise.reject(error);\r\n  });*/\r\n\r\n/*axiosInstance.interceptors.response.use(function (response) {\r\n    if(response.status === 401) {\r\n        return Promise.reject(response);\r\n    }\r\n -   return response;\r\n  }, function (error) {\r\n    return Promise.reject({errorMessage: \"Service unavailable\"});\r\n  });*/\r\n"]},"metadata":{},"sourceType":"module"}